<?php
/**
 * Created by PhpStorm.
 * User: amelexik
 * Date: 21.11.18
 */

namespace skeeks\cms\components;

use skeeks\cms\models\CmsLang;
use skeeks\cms\models\CmsSite;
use yii\base\Component;

class LanguageDetect extends Component
{

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        self::detectLang();
        if (isset(self::getLanguageSites()[\Yii::$app->language][0]))
            \Yii::$app->currentSite->set(self::getLanguageSites()[\Yii::$app->language][0]);
        else
            \Yii::$app->currentSite->set(CmsSite::find()->active()->andWhere(['def' => Cms::BOOL_Y])->one());

    }

    static $allowedLanguages = [
        'uk',
        'en'
    ];

    static $alias = [
        'ua' => 'uk'
    ];

    static $locales = [
        'uk' => 'uk_UA',
        'en' => 'en_UA',
    ];

    static $resolveUrl;

    static $_languageSites;

    public static function getLanguageSites()
    {
        if (!self::$_languageSites) {
            if ($sites = \skeeks\cms\models\CmsSite::find()->all()) {
                foreach ($sites as $cmsSite) {
                    $siteSettings = \skeeks\cms\models\CmsComponentSettings::find()
                        ->where(['component' => Cms::className()])
                        ->andWhere(['cms_site_id' => (int)$cmsSite->id])
                        ->one();
                    if ($siteSettings && isset($siteSettings->value['languageCode'])) {
                        if ($code = $siteSettings->value['languageCode']) {
                            self::$_languageSites[$code][] = $cmsSite;
                        }
                    }

                }
            }
        }
        return self::$_languageSites;

    }

    static $_sitesLanguages;

    public static function getSitesLanguage()
    {
        if (!self::$_sitesLanguages) {
            if ($lngSts = self::getLanguageSites()) {
                foreach ($lngSts as $code => $sites) {
                    if (isset($sites[0])) {
                        self::$_sitesLanguages[$sites[0]->id] = $code;
                    }
                }
            }
        }
        return self::$_sitesLanguages;

    }


    public static function detectLang()
    {
        $url = \Yii::$app->request->url;
        self::$resolveUrl = \Yii::$app->request->url;
        $list_languages = self::getPattern();

        preg_match("#^/($list_languages)(.*)#", $url, $match_arr);
        if (isset($match_arr[1]) && $match_arr[1] != '/' && $match_arr[1] != '') {

            $codeInUrl = $match_arr[1];

            if (isset(self::getLanguages()[$codeInUrl])) {
                $requestedLangCode = self::getLanguages()[$codeInUrl]['code'];
            } elseif ($requestedLangCode = self::getCodeByAlias($codeInUrl)) {

            }

            if ($requestedLangCode) {
                \Yii::$app->language = $requestedLangCode;
                if (isset(self::$locales[$requestedLangCode]))
                    \Yii::$app->formatter->locale = self::$locales[$requestedLangCode];
                \Yii::$app->cms->languageCode = $requestedLangCode;
                \Yii::$app->formatter->locale = 'uk_UA';
                \Yii::$app->homeUrl = '/' . $codeInUrl;

                if ($requestedLangCode == self::getDefaultLanguage()) {
                    header('Location: /');
                    die();
                } else {
                    self::$resolveUrl = preg_replace("/^\/$codeInUrl/", '', self::$resolveUrl);
                }
            }

        } else {
            $defaulLanguageCode = self::getDefaultLanguage(); //язык используемый по-умолчанию
            \Yii::$app->language = $defaulLanguageCode;
            \Yii::$app->cms->languageCode = $defaulLanguageCode;
            \Yii::$app->formatter->locale = $defaulLanguageCode;
        }


    }


    static $_languages;

    /**
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getLanguages()
    {
        if (!self::$_languages) {
            if ($languages = CmsLang::find()->active()->indexBy('code')->all()) {
                foreach ($languages as $language) {
                    if (!in_array($language->code, self::$allowedLanguages))
                        continue;
                    self::$_languages[$language->code] = [
                        'def'  => $language->def,
                        'name' => $language->name,
                        'code' => $language->code,
                    ];
                }
            }
        }
        return self::$_languages;
    }

    static $_defaultLanguage;

    public static function getDefaultLanguage()
    {
        if (!self::$_defaultLanguage) {

            // todo костыли, надо переделать
            if ($defaultSite = CmsSite::find()->active()->andWhere(['def' => Cms::BOOL_Y])->one()) {
                if (!$siteSettings = \skeeks\cms\models\CmsComponentSettings::find()
                    ->where(['component' => Cms::className()])
                    ->andWhere(['cms_site_id' => (int)$defaultSite->id])
                    ->one()) {
                    $siteSettings = \skeeks\cms\models\CmsComponentSettings::find()
                        ->where(['component' => Cms::className()])
                        ->one();
                }
                if ($siteSettings && isset($siteSettings->value['languageCode'])) {
                    if ($code = $siteSettings->value['languageCode']) {
                        self::$_defaultLanguage = $code;
                    }
                }
            }

        }
        return self::$_defaultLanguage;

    }

    public static function getCodeByAlias($alias)
    {
        if (isset(self::$alias[$alias]))
            return self::$alias[$alias];
        return false;
    }

    public static function getAliasByCode($code)
    {
        $codes = array_flip(self::$alias);
        if (isset($codes[$code]))
            return $alias = $codes[$code];
        return false;
    }

    public static function getPattern()
    {
        $list = '';
        $langs = self::getLanguages();
        $alias = array_flip(self::$alias);
        array_walk($langs, function ($value, $key) use (&$list, $alias) {
            $key = isset($alias[$key]) ? $alias[$key] : $key;
            $list .= $key . '|';
        });
        return $list;
    }

    /**
     * @param $code
     * @return bool|string
     * Префикс языка для урл. Учитывает язык по умолчанию + алиасы для языков(ua=>uk)
     */
    public static function getPrefix($code)
    {
        if (self::getDefaultLanguage() == $code)
            return '';
        if ($alias = self::getAliasByCode($code))
            return $alias;
        return $code;
    }

    /**
     * @return array
     */
    public static function getAvailableLanguages()
    {
        $result = [];
        if ($languages = self::getLanguages()) {
            foreach ($languages as $code => $language) {
                if (in_array($code, self::$allowedLanguages)) {
                    $langPrefix = self::getPrefix($code);
                    $language['url'] = empty($langPrefix) ? '/' : ('/' . $langPrefix);
                    $language['title'] = empty($langPrefix) ? $code : $langPrefix;
                    $result[$code] = $language;
                }
            }
        }
        return $result;
    }

}